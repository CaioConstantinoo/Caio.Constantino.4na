# Importando as bibliotecas necessárias
import numpy as np
import pandas as pd
from sklearn.datasets import load_wine
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Carregando o dataset Wine
wine = load_wine()
X = wine.data
y = wine.target

# Dividindo os dados em treinamento e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# Normalizando as features

# Implementando o classificador KNN
pipeline = Pipeline([
    ('scaler', StandardScaler()),  # Padronização dos dados
    ('knn', KNeighborsClassifier(n_neighbors=5))  # Classificador KNN
])

pipeline.fit(X_train, y_train)

y_pred = pipeline.predict(X_test)
# Calculando as métricas
print("Relatório de Classificação:")
print(classification_report(y_test, y_pred))

print("Matriz de Confusão:")
print(confusion_matrix(y_test, y_pred))

print("Acurácia:")
print(accuracy_score(y_test, y_pred))

# (Opcional) Plotando a Curva ROC e calculando a AUC para uma classe específica
# Para problemas multiclasse, considere a abordagem "one vs. rest".
